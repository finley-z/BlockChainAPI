package com.tt.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray2;
import org.web3j.abi.datatypes.generated.StaticArray5;
import org.web3j.abi.datatypes.generated.StaticArray6;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint160;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class TTVIP extends Contract {
    private static final String BINARY = "0x6080604052620f69b5600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005457600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614a29806100a46000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630f8cda201461010c57806310fe472b1461014957806312065fe0146101865780632843314e146101b15780633a742b04146101dc578063474da79a1461021a5780634a038c401461025f57806358afdd051461029c5780635e5c06e2146102e05780637290054d1461032157806375857ec31461035e5780637907f13d1461039b5780639ace38c2146103c4578063ac24c42014610406578063be710d6a1461042f578063c2a6ddc81461045a578063d10596b114610483578063db613e81146104ca578063de6a505c146104f9575b600080fd5b34801561011857600080fd5b50610133600480360361012e9190810190613cf0565b610522565b6040516101409190614416565b60405180910390f35b34801561015557600080fd5b50610170600480360361016b9190810190613cf0565b610535565b60405161017d919061445a565b60405180910390f35b34801561019257600080fd5b5061019b610581565b6040516101a89190614475565b60405180910390f35b3480156101bd57600080fd5b506101c66105e7565b6040516101d391906143f4565b60405180910390f35b3480156101e857600080fd5b5061020360048036036101fe9190810190613e59565b6107d0565b6040516102119291906143cb565b60405180910390f35b34801561022657600080fd5b50610241600480360361023c9190810190613fe4565b610afb565b60405161025699989796959493929190614513565b60405180910390f35b34801561026b57600080fd5b506102866004803603610281919081019061400d565b610db4565b6040516102939190614438565b60405180910390f35b3480156102a857600080fd5b506102c360048036036102be9190810190613f7f565b610dc9565b6040516102d79897969594939291906145b5565b60405180910390f35b3480156102ec57600080fd5b5061030760048036036103029190810190613cf0565b6110c5565b604051610318959493929190614378565b60405180910390f35b34801561032d57600080fd5b5061034860048036036103439190810190613e59565b611163565b6040516103559190614490565b60405180910390f35b34801561036a57600080fd5b5061038560048036036103809190810190613ec0565b611503565b6040516103929190614490565b60405180910390f35b3480156103a757600080fd5b506103c260048036036103bd9190810190613dba565b611901565b005b3480156103d057600080fd5b506103eb60048036036103e69190810190613fe4565b61199f565b6040516103fd969594939291906144ab565b60405180910390f35b34801561041257600080fd5b5061042d60048036036104289190810190613df6565b611b12565b005b34801561043b57600080fd5b50610444611edc565b60405161045191906146fa565b60405180910390f35b34801561046657600080fd5b50610481600480360361047c9190810190613d19565b611efb565b005b34801561048f57600080fd5b506104aa60048036036104a59190810190613f7f565b61216e565b6040516104c19b9a9998979695949392919061463a565b60405180910390f35b3480156104d657600080fd5b506104df6125d5565b6040516104f0959493929190614378565b60405180910390f35b34801561050557600080fd5b50610520600480360361051b9190810190613fa8565b61277f565b005b606061052e3383612c7e565b9050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160049054906101000a90046fffffffffffffffffffffffffffffffff16905090565b606080600080600060028054905060405190808252806020026020018201604052801561062e57816020015b61061b613954565b8152602001906001900390816106135790505b509350600092505b6002805490508310156107c6576001600060028581548110151561065657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000291506001600060028581548110151561070357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015490506040805190810160405280836bffffffffffffffffffffffff191660001916815260200182600019166000191681525084848151811015156107ac57fe5b906020019060200201819052508280600101935050610636565b8394505050505090565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561083157600080fd5b42915061083c6132e6565b905085600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160048282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff1663c2a6ddc833898985878b6040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161093796959493929190614310565b600060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b50505050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f15e7747ead530057c3d2b1a8787587d9e1d62570a928262c9598bdcd75fea47660405160405180910390a486600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160049054906101000a90046fffffffffffffffffffffffffffffffff16806fffffffffffffffffffffffffffffffff169050935093505050935093915050565b600781815481101515610b0a57fe5b90600052602060002090600702016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff1690806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b5050505050908060050160009054906101000a900467ffffffffffffffff16908060050160089054906101000a900463ffffffff1690806006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610daa5780601f10610d7f57610100808354040283529160200191610daa565b820191906000526020600020905b815481529060010190602001808311610d8d57829003601f168201915b5050505050905089565b6060610dc133848461337b565b905092915050565b600080600080600080600060606000610de0613976565b600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600882815481101515610e3157fe5b906000526020600020906005020160c060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016003820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110625780601f1061103757610100808354040283529160200191611062565b820191906000526020600020905b81548152906001019060200180831161104557829003601f168201915b5050505050815250509050806000015181602001516110848360200151610535565b83604001516110968560400151610535565b856060015186608001518760a00151809050995099509950995099509950995099505050919395975091939597565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900463ffffffff16908060030160049054906101000a90046fffffffffffffffffffffffffffffffff16905085565b600080600080856fffffffffffffffffffffffffffffffff1611801561120b5750846fffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160049054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1610155b151561121657600080fd5b61121e6132e6565b915042905084600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160048282829054906101000a90046fffffffffffffffffffffffffffffffff160392506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555084600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160048282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055503073ffffffffffffffffffffffffffffffffffffffff1663c2a6ddc833888886868a6040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161145496959493929190614310565b600060405180830381600087803b15801561146e57600080fd5b505af1158015611482573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f15e7747ead530057c3d2b1a8787587d9e1d62570a928262c9598bdcd75fea47660405160405180910390a481925050509392505050565b6000806000611510613a0b565b600061151a6132e6565b9350429250610120604051908101604052808573ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a63ffffffff1681526020018981526020018881526020018467ffffffffffffffff168152602001600163ffffffff168152602001878152509150600780549050905080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506007829080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff160217905550608082015181600301908051906020019061174d929190613ab0565b5060a082015181600401908051906020019061176a929190613ab0565b5060c08201518160050160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060e08201518160050160086101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160060190805190602001906117de929190613ab0565b50505050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055508373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f87c381bc9fde4d800b96cb8c51c2de2f860fae851955c2cc063723d0bf1cacef60405160405180910390a48394505050505095945050505050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160048282829054906101000a90046fffffffffffffffffffffffffffffffff160192506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505050565b6008818154811015156119ae57fe5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a90046fffffffffffffffffffffffffffffffff16908060030160109054906101000a900467ffffffffffffffff1690806004018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b085780601f10611add57610100808354040283529160200191611b08565b820191906000526020600020905b815481529060010190602001808311611aeb57829003601f168201915b5050505050905086565b611b1a613b30565b611b22613b30565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820154600019166000191681526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509150600082602001516fffffffffffffffffffffffffffffffff16141515611cb657600080fd5b60a0604051908101604052808773ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff16815260200185600019168152602001600163ffffffff1681526020018467ffffffffffffffff166fffffffffffffffffffffffffffffffff16815250905080600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506040820151816002019060001916905560608201518160030160006101000a81548163ffffffff021916908363ffffffff16021790555060808201518160030160046101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555090505060028690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600880549050905080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860c0604051908101604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001876fffffffffffffffffffffffffffffffff1681526020018567ffffffffffffffff168152602001848152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160030160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a0820151816004019080519060200190612161929190613ab0565b5050505050505050505050565b60008060008060008060608060008060606000612189613a0b565b600460008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506007828154811015156121da57fe5b906000526020600020906007020161012060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123b65780601f1061238b576101008083540402835291602001916123b6565b820191906000526020600020905b81548152906001019060200180831161239957829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124585780601f1061242d57610100808354040283529160200191612458565b820191906000526020600020905b81548152906001019060200180831161243b57829003601f168201915b505050505081526020016005820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160089054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125525780601f1061252757610100808354040283529160200191612552565b820191906000526020600020905b81548152906001019060200180831161253557829003601f168201915b5050505050815250509050806000015181602001516125748360200151610535565b83604001516125868560400151610535565b856060015186608001518760a001518860c001518960e001518a61010001518494508393508090509c509c509c509c509c509c509c509c509c509c509c50505091939597999b90929496989a50565b60008060008060006125e5613b30565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820154600019166000191681526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090508060000151816020015182604001518360600151846080015195509550955095509550509091929394565b6000612789613a0b565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491506007828154811015156127da57fe5b906000526020600020906007020161012060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129b65780601f1061298b576101008083540402835291602001916129b6565b820191906000526020600020905b81548152906001019060200180831161299957829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a585780601f10612a2d57610100808354040283529160200191612a58565b820191906000526020600020905b815481529060010190602001808311612a3b57829003601f168201915b505050505081526020016005820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016005820160089054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b525780601f10612b2757610100808354040283529160200191612b52565b820191906000526020600020905b815481529060010190602001808311612b3557829003601f168201915b5050505050815250509050806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015612ba6575060018160e0015163ffffffff16145b1515612bb157600080fd5b82600783815481101515612bc157fe5b906000526020600020906007020160050160086101000a81548163ffffffff021916908363ffffffff160217905550806000015173ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff167f81d2c3e2465df477789fe93364fb75482645af21faaa3d063f0b501c6c17162d86604051612c709190614715565b60405180910390a450505050565b60606000606060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612d2257600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d29565b6008805490505b945084604051908082528060200260200182016040528015612d6557816020015b612d52613ba3565b815260200190600190039081612d4a5790505b50935060009250600091505b6008805490508267ffffffffffffffff1610156132d85760088267ffffffffffffffff16815481101515612da157fe5b906000526020600020906005020190506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156130515760008773ffffffffffffffffffffffffffffffffffffffff1614158015612e7d57508673ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15612e87576132cb565b60a0604051908101604052808260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260030160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250848467ffffffffffffffff1681518110151561303757fe5b9060200190602002018190525082806001019350506132ca565b8773ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806130fe57508773ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156132c95760a0604051908101604052808260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260030160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250848467ffffffffffffffff168151811015156132b357fe5b9060200190602002018190525082806001019350505b5b5b8180600101925050612d71565b839550505050505092915050565b60006009600081819054906101000a900473ffffffffffffffffffffffffffffffffffffffff168092919060010191906101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600060606000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161461342057600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613427565b6007805490505b95508560405190808252806020026020018201604052801561346357816020015b613450613bc6565b8152602001906001900390816134485790505b5094506000935060008963ffffffff161461347f576001613482565b60005b925060008863ffffffff161461349957600161349c565b60005b9150600090505b6007805490508167ffffffffffffffff1610156139445782801561350d57508863ffffffff1660078267ffffffffffffffff168154811015156134e257fe5b906000526020600020906007020160020160149054906101000a900463ffffffff1663ffffffff1614155b1561351757613937565b81801561356a57508763ffffffff1660078267ffffffffffffffff1681548110151561353f57fe5b906000526020600020906007020160050160089054906101000a900463ffffffff1663ffffffff1614155b1561357457613937565b8973ffffffffffffffffffffffffffffffffffffffff1660078267ffffffffffffffff168154811015156135a457fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061366d57508973ffffffffffffffffffffffffffffffffffffffff1660078267ffffffffffffffff1681548110151561362357fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b156139315760c06040519081016040528060078367ffffffffffffffff1681548110151561369757fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078367ffffffffffffffff1681548110151561371357fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078367ffffffffffffffff1681548110151561378f57fe5b906000526020600020906007020160020160149054906101000a900463ffffffff1663ffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078367ffffffffffffffff168154811015156137eb57fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078367ffffffffffffffff1681548110151561386757fe5b906000526020600020906007020160050160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160078367ffffffffffffffff168154811015156138cb57fe5b906000526020600020906007020160050160089054906101000a900463ffffffff1660ff1673ffffffffffffffffffffffffffffffffffffffff16815250858581518110151561391757fe5b906020019060200201819052508380600101945050613936565b613937565b5b80806001019150506134a3565b8496505050505050509392505050565b6040805190810160405280600290602082028038833980820191505090505090565b60c060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001606081525090565b61012060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff1681526020016060815260200160608152602001600067ffffffffffffffff168152602001600063ffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613af157805160ff1916838001178555613b1f565b82800160010185558215613b1f579182015b82811115613b1e578251825591602001919060010190613b03565b5b509050613b2c9190613be9565b5090565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160008019168152602001600063ffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b60a060405190810160405280600590602082028038833980820191505090505090565b60c060405190810160405280600690602082028038833980820191505090505090565b613c0b91905b80821115613c07576000816000905550600101613bef565b5090565b90565b6000613c1a8235614908565b905092915050565b6000613c2e8235614928565b905092915050565b600082601f8301121515613c4957600080fd5b8135613c5c613c578261475d565b614730565b91508082526020830160208301858383011115613c7857600080fd5b613c8383828461499c565b50505092915050565b6000613c988235614932565b905092915050565b6000613cac823561494e565b905092915050565b6000613cc0823561496e565b905092915050565b6000613cd48235614978565b905092915050565b6000613ce88235614988565b905092915050565b600060208284031215613d0257600080fd5b6000613d1084828501613c0e565b91505092915050565b60008060008060008060c08789031215613d3257600080fd5b6000613d4089828a01613c0e565b9650506020613d5189828a01613c0e565b9550506040613d6289828a01613c8c565b9450506060613d7389828a01613ca0565b9350506080613d8489828a01613cdc565b92505060a087013567ffffffffffffffff811115613da157600080fd5b613dad89828a01613c36565b9150509295509295509295565b60008060408385031215613dcd57600080fd5b6000613ddb85828601613c0e565b9250506020613dec85828601613c8c565b9150509250929050565b60008060008060808587031215613e0c57600080fd5b6000613e1a87828801613c0e565b9450506020613e2b87828801613c8c565b9350506040613e3c87828801613c22565b9250506060613e4d87828801613cdc565b91505092959194509250565b600080600060608486031215613e6e57600080fd5b6000613e7c86828701613c0e565b9350506020613e8d86828701613c8c565b925050604084013567ffffffffffffffff811115613eaa57600080fd5b613eb686828701613c36565b9150509250925092565b600080600080600060a08688031215613ed857600080fd5b6000613ee688828901613c0e565b9550506020613ef788828901613cc8565b945050604086013567ffffffffffffffff811115613f1457600080fd5b613f2088828901613c36565b935050606086013567ffffffffffffffff811115613f3d57600080fd5b613f4988828901613c36565b925050608086013567ffffffffffffffff811115613f6657600080fd5b613f7288828901613c36565b9150509295509295909350565b600060208284031215613f9157600080fd5b6000613f9f84828501613ca0565b91505092915050565b60008060408385031215613fbb57600080fd5b6000613fc985828601613ca0565b9250506020613fda85828601613cc8565b9150509250929050565b600060208284031215613ff657600080fd5b600061400484828501613cb4565b91505092915050565b6000806040838503121561402057600080fd5b600061402e85828601613cc8565b925050602061403f85828601613cc8565b9150509250929050565b61405281614874565b82525050565b6000614063826147ce565b80845260208401935061407583614789565b60005b828110156140a75761408b868351614169565b61409482614826565b9150604086019550600181019050614078565b50849250505092915050565b60006140be826147d9565b8084526020840193506140d083614796565b60005b82811015614102576140e68683516141b4565b6140ef82614833565b915060a0860195506001810190506140d3565b50849250505092915050565b6000614119826147e4565b80845260208401935061412b836147a3565b60005b8281101561415d576141418683516141ff565b61414a82614840565b915060c08601955060018101905061412e565b50849250505092915050565b614172816147ef565b61417b826147b0565b60005b828110156141ad5761419185835161424a565b61419a8261484d565b915060208501945060018101905061417e565b5050505050565b6141bd816147fa565b6141c6826147ba565b60005b828110156141f8576141dc8583516142d4565b6141e58261485a565b91506020850194506001810190506141c9565b5050505050565b61420881614805565b614211826147c4565b60005b82811015614243576142278583516142d4565b61423082614867565b9150602085019450600181019050614214565b5050505050565b61425381614894565b82525050565b60006142648261481b565b8084526142788160208601602086016149ab565b614281816149de565b602085010191505092915050565b600061429a82614810565b8084526142ae8160208601602086016149ab565b6142b7816149de565b602085010191505092915050565b6142ce8161489e565b82525050565b6142dd816148ba565b82525050565b6142ec816148da565b82525050565b6142fb816148e4565b82525050565b61430a816148f4565b82525050565b600060c0820190506143256000830189614049565b6143326020830188614049565b61433f60408301876142c5565b61434c60608301866142d4565b6143596080830185614301565b81810360a083015261436b8184614259565b9050979650505050505050565b600060a08201905061438d6000830188614049565b61439a60208301876142c5565b6143a7604083018661424a565b6143b460608301856142f2565b6143c160808301846142c5565b9695505050505050565b60006040820190506143e06000830185614049565b6143ed60208301846142e3565b9392505050565b6000602082019050818103600083015261440e8184614058565b905092915050565b6000602082019050818103600083015261443081846140b3565b905092915050565b60006020820190508181036000830152614452818461410e565b905092915050565b600060208201905061446f600083018461424a565b92915050565b600060208201905061448a60008301846142c5565b92915050565b60006020820190506144a560008301846142d4565b92915050565b600060c0820190506144c060008301896142d4565b6144cd6020830188614049565b6144da6040830187614049565b6144e760608301866142c5565b6144f46080830185614301565b81810360a0830152614506818461428f565b9050979650505050505050565b600061012082019050614529600083018c6142d4565b614536602083018b614049565b614543604083018a614049565b61455060608301896142f2565b8181036080830152614562818861428f565b905081810360a0830152614576818761428f565b905061458560c0830186614301565b61459260e08301856142f2565b8181036101008301526145a5818461428f565b90509a9950505050505050505050565b6000610100820190506145cb600083018b6142d4565b6145d8602083018a614049565b6145e5604083018961424a565b6145f26060830188614049565b6145ff608083018761424a565b61460c60a08301866142c5565b61461960c0830185614301565b81810360e083015261462b8184614259565b90509998505050505050505050565b600061016082019050614650600083018e6142d4565b61465d602083018d614049565b61466a604083018c61424a565b614677606083018b614049565b614684608083018a61424a565b61469160a08301896142f2565b81810360c08301526146a38188614259565b905081810360e08301526146b78187614259565b90506146c7610100830186614301565b6146d56101208301856142f2565b8181036101408301526146e88184614259565b90509c9b505050505050505050505050565b600060208201905061470f60008301846142e3565b92915050565b600060208201905061472a60008301846142f2565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561475357600080fd5b8060405250919050565b600067ffffffffffffffff82111561477457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600060059050919050565b600060069050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b838110156149c95780820151818401526020810190506149ae565b838111156149d8576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582014951a750e4e2a97ae46dbe5b49a981a001d0fe3557e2bebe779f93dcb5a22906c6578706572696d656e74616cf50037";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("666", "0xb0b2592363885ed0d239cc040f072140375a38b7");
    }

    protected TTVIP(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TTVIP(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<SignedEventResponse> getSignedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Signed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SignedEventResponse> responses = new ArrayList<SignedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignedEventResponse typedResponse = new SignedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.firstParty = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.secondParty = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.txHash = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SignedEventResponse> signedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Signed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SignedEventResponse>() {
            @Override
            public SignedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SignedEventResponse typedResponse = new SignedEventResponse();
                typedResponse.log = log;
                typedResponse.firstParty = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.secondParty = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.txHash = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ConfirmedEventResponse> getConfirmedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Confirmed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ConfirmedEventResponse> responses = new ArrayList<ConfirmedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConfirmedEventResponse typedResponse = new ConfirmedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.firstParty = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.secondParty = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.txHash = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ConfirmedEventResponse> confirmedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Confirmed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ConfirmedEventResponse>() {
            @Override
            public ConfirmedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ConfirmedEventResponse typedResponse = new ConfirmedEventResponse();
                typedResponse.log = log;
                typedResponse.firstParty = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.secondParty = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.txHash = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransformedEventResponse> getTransformedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transformed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransformedEventResponse> responses = new ArrayList<TransformedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransformedEventResponse typedResponse = new TransformedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.txHash = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransformedEventResponse> transformedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transformed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransformedEventResponse>() {
            @Override
            public TransformedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransformedEventResponse typedResponse = new TransformedEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.txHash = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Tuple9<BigInteger, String, String, BigInteger, String, String, BigInteger, BigInteger, String>> contracts(BigInteger param0) {
        final Function function = new Function("contracts", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint160>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple9<BigInteger, String, String, BigInteger, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple9<BigInteger, String, String, BigInteger, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple9<BigInteger, String, String, BigInteger, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, String, String, BigInteger, String, String, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>> accounts(String param0) {
        final Function function = new Function("accounts", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint128>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>>(
                new Callable<Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<BigInteger, String, String, BigInteger, BigInteger, String>> transactions(BigInteger param0) {
        final Function function = new Function("transactions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint160>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<BigInteger, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple6<BigInteger, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public static RemoteCall<TTVIP> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TTVIP.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TTVIP> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TTVIP.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public RemoteCall<TransactionReceipt> signContract(String secondParty, BigInteger contractType, String contractName, String contractContent, String remark) {
        final Function function = new Function(
                "signContract", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(secondParty), 
                new org.web3j.abi.datatypes.generated.Uint32(contractType), 
                new org.web3j.abi.datatypes.Utf8String(contractName), 
                new org.web3j.abi.datatypes.Utf8String(contractContent), 
                new org.web3j.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmContract(BigInteger txHash, BigInteger state) {
        final Function function = new Function(
                "confirmContract", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint160(txHash), 
                new org.web3j.abi.datatypes.generated.Uint32(state)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getContracts(BigInteger contractType, BigInteger state) {
        final Function function = new Function("getContracts", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(contractType), 
                new org.web3j.abi.datatypes.generated.Uint32(state)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray6<Uint160>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple11<BigInteger, String, byte[], String, byte[], BigInteger, String, String, BigInteger, BigInteger, String>> getConrtactDetail(BigInteger txHash) {
        final Function function = new Function("getConrtactDetail", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint160(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint160>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple11<BigInteger, String, byte[], String, byte[], BigInteger, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple11<BigInteger, String, byte[], String, byte[], BigInteger, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple11<BigInteger, String, byte[], String, byte[], BigInteger, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, String, byte[], String, byte[], BigInteger, String, String, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (byte[]) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (String) results.get(10).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transform(String to, BigInteger amount, String remark) {
        final Function function = new Function(
                "transform", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint128(amount), 
                new org.web3j.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addFund(String to, BigInteger amount, String remark) {
        final Function function = new Function(
                "addFund", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint128(amount), 
                new org.web3j.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> takerecord(String from, String to, BigInteger amount, BigInteger txHash, BigInteger timestamp, String remark) {
        final Function function = new Function(
                "takerecord", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint128(amount), 
                new org.web3j.abi.datatypes.generated.Uint160(txHash), 
                new org.web3j.abi.datatypes.generated.Uint64(timestamp), 
                new org.web3j.abi.datatypes.Utf8String(remark)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getTransactions(String to) {
        final Function function = new Function("getTransactions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray5<Uint160>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple8<BigInteger, String, byte[], String, byte[], BigInteger, BigInteger, String>> getTransactionDetail(BigInteger txHash) {
        final Function function = new Function("getTransactionDetail", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint160(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint160>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<BigInteger, String, byte[], String, byte[], BigInteger, BigInteger, String>>(
                new Callable<Tuple8<BigInteger, String, byte[], String, byte[], BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<BigInteger, String, byte[], String, byte[], BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, byte[], String, byte[], BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (byte[]) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> register(String user_addr, BigInteger userId, byte[] userName, BigInteger balance) {
        final Function function = new Function(
                "register", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(user_addr), 
                new org.web3j.abi.datatypes.generated.Uint128(userId), 
                new org.web3j.abi.datatypes.generated.Bytes32(userName), 
                new org.web3j.abi.datatypes.generated.Uint64(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateBalance(String addr, BigInteger amount) {
        final Function function = new Function(
                "updateBalance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr), 
                new org.web3j.abi.datatypes.generated.Uint128(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getAccountList() {
        final Function function = new Function("getAccountList", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>> getAccount() {
        final Function function = new Function("getAccount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint128>() {}));
        return new RemoteCall<Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>>(
                new Callable<Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, byte[], BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getUserNameByAddress(String userAddr) {
        final Function function = new Function(
                "getUserNameByAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userAddr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBalance() {
        final Function function = new Function("getBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> geInstanceBalance() {
        final Function function = new Function(
                "geInstanceBalance", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static TTVIP load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TTVIP(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static TTVIP load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TTVIP(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class SignedEventResponse {
        public Log log;

        public String firstParty;

        public String secondParty;

        public BigInteger txHash;
    }

    public static class ConfirmedEventResponse {
        public Log log;

        public String firstParty;

        public String secondParty;

        public BigInteger txHash;

        public BigInteger state;
    }

    public static class TransformedEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger txHash;
    }
}
